{"name":"Scalapb","tagline":"Protocol buffer compiler for Scala","body":"ScalaPB\r\n=======\r\n\r\n[![Build Status](https://travis-ci.org/scalapb/ScalaPB.svg?branch=master)](https://travis-ci.org/scalapb/ScalaPB)\r\n\r\nScalaPB is a protocol buffer compiler (`protoc`) plugin for Scala. It will generate Scala case classes,\r\nparsers and serializers for your protocol buffers.\r\n\r\nThe biggest difference between ScalaPB and ScalaBuff is that ScalaPB uses `protoc` to parse the source\r\n`.proto` files instead of rolling its own parser. By using the parser implementation provided by Google,\r\nScalaPB achieves perfect compatibility with the language specification and can handle any valid proto\r\nfile.\r\n\r\nScalaPB generates case classes that can co-exist in the same project alongside the Java-generated code\r\nfor ProtocolBuffer. This makes it easy to gradually migrate an existing project from the Java version\r\nof protocol buffers to Scala. This is acheived by having the ScalaPB generated code use an outer class\r\nwith the `PB` suffix appended to its name.\r\n\r\nThe current implementation of ScalaPB delegates parsing and serializing to the Java implementation.\r\nThis is an \"implementation detail\" that will change shortly.\r\n\r\nTesting\r\n=======\r\n\r\nScalaPB uses ScalaCheck to aggressively test the generated code. The test generates hundred different sets of\r\nproto files. The sets are growing in complexity: number of files, references to messages from other protos,\r\nmessage nesting and so on. Then, test data is generated to populate this protocol schema, then we check\r\nthat both implementations generate the same serialized result from this data.\r\n\r\nRunning the tests:\r\n\r\n    $ sbt test\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}
